"use strict";(self.webpackChunkmcp_active_cell_bridge=self.webpackChunkmcp_active_cell_bridge||[]).push([[509],{509:(e,t,l)=>{l.r(t),l.d(t,{default:()=>o});var s=l(980);const o={id:"mcp-active-cell-bridge:plugin",description:"Bridge active cell content to MCP server via kernel comm",autoStart:!0,requires:[s.INotebookTracker],activate:(e,t)=>{console.log("MCP Active Cell Bridge extension activated");const l=new WeakMap,o=new WeakMap,n=new WeakMap,c=(e,t)=>t&&!t.isDisposed&&!0===o.get(e),d=async e=>{if(!e||!e.status||"dead"===e.status)return console.warn("MCP Active Cell Bridge: Kernel not available or dead"),null;if("idle"!==e.status&&"busy"!==e.status)return console.warn(`MCP Active Cell Bridge: Kernel not ready (status: ${e.status})`),null;let d=l.get(e);if(!d||!c(e,d)){let c=n.get(e);if(c)try{return await c,l.get(e)||null}catch(e){return null}return c=(async()=>{try{return d=e.createComm("mcp:active_cell"),d.onMsg=l=>{var o;const n=(null===(o=null==l?void 0:l.content)||void 0===o?void 0:o.data)||{},c=n.type;"request_current"===c?i(e):"update_cell"===c?(async(e,l,s)=>{const o=s.request_id,n=s.content;try{const e=t.currentWidget,s=t.activeCell;if(!e||!s)return void l.send({type:"update_response",request_id:o,success:!1,message:"No active cell available for update"});s.model.sharedModel.setSource(n),l.send({type:"update_response",request_id:o,success:!0,cell_id:s.model.id,message:"Cell updated successfully"}),console.log(`MCP Active Cell Bridge: Updated cell content (${n.length} chars)`)}catch(e){console.error("MCP Active Cell Bridge: Failed to update cell:",e),l.send({type:"update_response",request_id:o,success:!1,message:`Failed to update cell: ${e}`})}})(0,d,n):"execute_cell"===c?(async(e,l,o)=>{const n=o.request_id;try{const e=t.currentWidget,o=t.activeCell;if(!e||!o)return void l.send({type:"execute_response",request_id:n,success:!1,message:"No active cell available for execution"});await s.NotebookActions.run(e.content,e.sessionContext),l.send({type:"execute_response",request_id:n,success:!0,cell_id:o.model.id,message:"Cell executed successfully"}),console.log("MCP Active Cell Bridge: Executed active cell")}catch(e){console.error("MCP Active Cell Bridge: Failed to execute cell:",e),l.send({type:"execute_response",request_id:n,success:!1,message:`Failed to execute cell: ${e}`})}})(0,d,n):"add_cell"===c?(async(e,l,o)=>{const n=o.request_id,c=o.cell_type||"code",d=o.position||"below",i=o.content||"";try{const e=t.currentWidget;if(!e)return void l.send({type:"add_cell_response",request_id:n,success:!1,message:"No active notebook available"});const o=["code","markdown","raw"];if(!o.includes(c))return void l.send({type:"add_cell_response",request_id:n,success:!1,message:`Invalid cell_type '${c}'. Must be one of: ${o.join(", ")}`});const r=["above","below"];if(!r.includes(d))return void l.send({type:"add_cell_response",request_id:n,success:!1,message:`Invalid position '${d}'. Must be one of: ${r.join(", ")}`});"above"===d?await s.NotebookActions.insertAbove(e.content):await s.NotebookActions.insertBelow(e.content);const a=t.activeCell;a&&(a.model.type!==c&&await s.NotebookActions.changeCellType(e.content,c),i&&a.model.sharedModel.setSource(i)),l.send({type:"add_cell_response",request_id:n,success:!0,cell_type:c,position:d,content_length:i.length,cell_id:null==a?void 0:a.model.id,message:"Cell added successfully"}),console.log(`MCP Active Cell Bridge: Added ${c} cell ${d} with ${i.length} chars`)}catch(e){console.error("MCP Active Cell Bridge: Failed to add cell:",e),l.send({type:"add_cell_response",request_id:n,success:!1,message:`Failed to add cell: ${e}`})}})(0,d,n):"delete_cell"===c?(async(e,l,o)=>{var n;const c=o.request_id;try{const e=t.currentWidget,o=t.activeCell;if(!e||!o)return void l.send({type:"delete_cell_response",request_id:c,success:!1,message:"No active cell available for deletion"});const d=o.model.id;((null===(n=e.content.model)||void 0===n?void 0:n.cells.length)||0)<=1?(o.model.sharedModel.setSource(""),l.send({type:"delete_cell_response",request_id:c,success:!0,cell_id:d,action:"cleared",message:"Last cell content cleared (cell preserved)"}),console.log("MCP Active Cell Bridge: Cleared last cell content")):(await s.NotebookActions.deleteCells(e.content),l.send({type:"delete_cell_response",request_id:c,success:!0,cell_id:d,action:"deleted",message:"Cell deleted successfully"}),console.log("MCP Active Cell Bridge: Deleted cell"))}catch(e){console.error("MCP Active Cell Bridge: Failed to delete cell:",e),l.send({type:"delete_cell_response",request_id:c,success:!1,message:`Failed to delete cell: ${e}`})}})(0,d,n):"apply_patch"===c?(async(e,l,s)=>{const o=s.request_id,n=s.old_text||"",c=s.new_text||"";try{const e=t.currentWidget,s=t.activeCell;if(!e||!s)return void l.send({type:"apply_patch_response",request_id:o,success:!1,message:"No active cell available for patching"});if(!n)return void l.send({type:"apply_patch_response",request_id:o,success:!1,message:"old_text parameter cannot be empty"});const d=s.model.sharedModel.getSource(),i=d.replace(n,c);i!==d?(s.model.sharedModel.setSource(i),l.send({type:"apply_patch_response",request_id:o,success:!0,cell_id:s.model.id,replaced:!0,old_text_length:n.length,new_text_length:c.length,content_length_before:d.length,content_length_after:i.length,message:"Patch applied successfully"}),console.log(`MCP Active Cell Bridge: Applied patch (${n.length} -> ${c.length} chars)`)):(l.send({type:"apply_patch_response",request_id:o,success:!0,cell_id:s.model.id,replaced:!1,old_text_length:n.length,new_text_length:c.length,message:"Patch target not found - no changes made"}),console.log("MCP Active Cell Bridge: Patch target not found"))}catch(e){console.error("MCP Active Cell Bridge: Failed to apply patch:",e),l.send({type:"apply_patch_response",request_id:o,success:!1,message:`Failed to apply patch: ${e}`})}})(0,d,n):console.warn(`MCP Active Cell Bridge: Unknown message type: ${c}`)},d.onClose=t=>{console.log("MCP Active Cell Bridge: Comm closed"),o.delete(e),l.delete(e),n.delete(e)},await d.open({}).done,o.set(e,!0),l.set(e,d),d}catch(t){console.error("MCP Active Cell Bridge: Failed to create comm:",t);const s=(null==t?void 0:t.toString())||"";throw(s.includes("No such comm target")||s.includes("comm target"))&&(console.error("MCP Active Cell Bridge: Kernel comm target not registered!"),console.error("Run this command in a notebook cell: %load_ext servers.jupyter_qcodes.jupyter_mcp_extension")),o.delete(e),l.delete(e),t}finally{n.delete(e)}})(),n.set(e,c),await c}return d},i=async s=>{var i,r,a,u,g,p,v;const _=t.currentWidget,C=t.activeCell;if(!_||!C)return;const h=null!=s?s:null===(i=_.sessionContext.session)||void 0===i?void 0:i.kernel;if(!h)return;const y=await d(h);if(y&&c(h,y))try{const t=C.editor,l=C.model.sharedModel.getSource();let s=null;try{s=null!==(a=null===(r=null==t?void 0:t.getCursorPosition)||void 0===r?void 0:r.call(t))&&void 0!==a?a:null}catch(e){}let o=null;try{const e=null!==(g=null===(u=null==t?void 0:t.getSelection)||void 0===u?void 0:u.call(t))&&void 0!==g?g:null;e&&e.start!==e.end&&(o={start:e.start,end:e.end})}catch(e){}const n=5e4;let c=l,d=!1;l.length>n&&(c=l.slice(0,n),d=!0);const i={type:"snapshot",path:_.context.path,index:_.content.activeCellIndex,id:C.model.id,cell_type:C.model.type,text:c,cursor:s,selection:o,truncated:d,original_length:l.length,ts_ms:Date.now(),client_id:null!==(v=null===(p=e.info)||void 0===p?void 0:p.workspace)&&void 0!==v?v:"unknown"};y.send(i),console.log(`MCP Active Cell Bridge: Sent snapshot (${c.length} chars)`)}catch(e){console.error("MCP Active Cell Bridge: Failed to send snapshot:",e),l.delete(h),o.delete(h),n.delete(h)}else console.warn("MCP Active Cell Bridge: Comm not ready for sending")};t.activeCellChanged.connect(async(e,l)=>{var s,o,n;const c=null!==(n=null===(o=null===(s=t.currentWidget)||void 0===s?void 0:s.sessionContext.session)||void 0===o?void 0:o.kernel)&&void 0!==n?n:null;await d(c),await i(c);const r=t.activeCell;if(r){const e=(e=>{let t=null;return()=>{t&&window.clearTimeout(t),t=window.setTimeout(e,2e3)}})(()=>i(c));r.model.sharedModel.changed.connect(()=>{e()}),console.log("MCP Active Cell Bridge: Tracking new active cell")}}),t.currentChanged.connect(async(e,l)=>{var s,o,n;const c=null!==(n=null===(o=null===(s=t.currentWidget)||void 0===s?void 0:s.sessionContext.session)||void 0===o?void 0:o.kernel)&&void 0!==n?n:null;await d(c),await i(c),console.log("MCP Active Cell Bridge: Notebook changed, sent snapshot")}),t.widgetAdded.connect((e,t)=>{t.sessionContext.ready.then(()=>{var e,l;const s=null!==(l=null===(e=t.sessionContext.session)||void 0===e?void 0:e.kernel)&&void 0!==l?l:null;d(s),console.log("MCP Active Cell Bridge: Kernel ready, setting up comm")})}),console.log("MCP Active Cell Bridge: Event listeners registered")}}}}]);