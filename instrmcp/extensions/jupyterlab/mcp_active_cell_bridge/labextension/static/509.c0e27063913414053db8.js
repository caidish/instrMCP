"use strict";(self.webpackChunkmcp_active_cell_bridge=self.webpackChunkmcp_active_cell_bridge||[]).push([[509],{509:(e,t,s)=>{s.r(t),s.d(t,{default:()=>c});var l=s(980),o=s(436),n=s(256);const c={id:"mcp-active-cell-bridge:plugin",description:"Bridge active cell content to MCP server and handle consent dialogs",autoStart:!0,requires:[l.INotebookTracker],activate:(e,t)=>{console.log("MCP Active Cell Bridge extension activated");const s=new WeakMap,c=new WeakMap,d=new WeakMap,r=new WeakMap,i=(e,t)=>t&&!t.isDisposed&&!0===c.get(e),a=e=>{e&&e.status&&"dead"!==e.status&&(e.registerCommTarget("mcp:capcall",(t,s)=>{console.log("MCP Consent: Backend opened consent comm channel");let l=r.get(e);l||(l=new Set,r.set(e,l)),l.add(t),t.onMsg=e=>{var s;const l=(null===(s=null==e?void 0:e.content)||void 0===s?void 0:s.data)||{},c=l.type;"consent_request"===c?(async(e,t,s)=>{const l=s.operation||"unknown",c=s.tool_name||"Unnamed Tool",d=s.author||"Unknown Author",r=s.details||{};console.log(`MCP Consent: Received consent request for ${l} of tool '${c}' by '${d}'`);try{const e=document.createElement("div");e.style.maxWidth="600px";const s=document.createElement("div");if(s.style.marginBottom="15px",s.innerHTML=`\n          <div style="margin-bottom: 10px;">\n            <strong>Operation:</strong> ${l}\n          </div>\n          <div style="margin-bottom: 10px;">\n            <strong>Tool:</strong> ${c}\n          </div>\n          <div style="margin-bottom: 10px;">\n            <strong>Author:</strong> ${d}\n          </div>\n          <div style="margin-bottom: 10px;">\n            <strong>Version:</strong> ${r.version||"N/A"}\n          </div>\n          <div style="margin-bottom: 10px;">\n            <strong>Description:</strong> ${r.description||"No description provided"}\n          </div>\n        `,r.capabilities&&r.capabilities.length>0){const e=document.createElement("div");e.style.marginBottom="10px",e.innerHTML=`\n            <div style="margin-bottom: 5px;"><strong>Capabilities:</strong></div>\n            <ul style="margin: 0; padding-left: 20px;">\n              ${r.capabilities.map(e=>`<li>${e}</li>`).join("")}\n            </ul>\n          `,s.appendChild(e)}if(e.appendChild(s),r.source_code){const t=document.createElement("div");t.style.marginTop="15px";const s=document.createElement("div");s.innerHTML="<strong>Source Code:</strong>",s.style.marginBottom="5px",t.appendChild(s);const l=document.createElement("pre");l.style.maxHeight="300px",l.style.overflow="auto",l.style.padding="10px",l.style.backgroundColor="#f5f5f5",l.style.border="1px solid #ddd",l.style.borderRadius="4px",l.style.fontSize="12px",l.style.fontFamily="monospace",l.textContent=r.source_code,t.appendChild(l),e.appendChild(t)}const i=new n.Widget({node:e}),a=await(0,o.showDialog)({title:`Tool ${l.charAt(0).toUpperCase()+l.slice(1)} Consent`,body:i,buttons:[o.Dialog.cancelButton({label:"Decline"}),o.Dialog.okButton({label:"Allow"}),o.Dialog.warnButton({label:"Always Allow"})],defaultButton:1});let u=!1,p=!1,g="";"Allow"===a.button.label?(u=!0,p=!1,g="User approved"):"Always Allow"===a.button.label?(u=!0,p=!0,g="User approved with always allow"):(u=!1,p=!1,g="User declined"),t.send({type:"consent_response",approved:u,always_allow:p,reason:g}),console.log(`MCP Consent: Sent response - approved: ${u}, always_allow: ${p}`)}catch(e){console.error("MCP Consent: Failed to show consent dialog:",e),t.send({type:"consent_response",approved:!1,always_allow:!1,reason:`Dialog error: ${e}`})}})(0,t,l):console.warn(`MCP Consent: Unknown message type: ${c}`)},t.onClose=s=>{console.log("MCP Consent: Comm closed by backend");const l=r.get(e);l&&l.delete(t)}}),console.log("MCP Consent: Registered comm target mcp:capcall"))},u=async e=>{if(!e||!e.status||"dead"===e.status)return console.warn("MCP Active Cell Bridge: Kernel not available or dead"),null;if("idle"!==e.status&&"busy"!==e.status)return console.warn(`MCP Active Cell Bridge: Kernel not ready (status: ${e.status})`),null;let o=s.get(e);if(!o||!i(e,o)){let n=d.get(e);if(n)try{return await n,s.get(e)||null}catch(e){return null}return n=(async()=>{try{return o=e.createComm("mcp:active_cell"),o.onMsg=s=>{var n;const c=(null===(n=null==s?void 0:s.content)||void 0===n?void 0:n.data)||{},d=c.type;"request_current"===d?p(e):"update_cell"===d?(async(e,s,l)=>{const o=l.request_id,n=l.content;try{const e=t.currentWidget,l=t.activeCell;if(!e||!l)return void s.send({type:"update_response",request_id:o,success:!1,message:"No active cell available for update"});l.model.sharedModel.setSource(n),s.send({type:"update_response",request_id:o,success:!0,cell_id:l.model.id,message:"Cell updated successfully"}),console.log(`MCP Active Cell Bridge: Updated cell content (${n.length} chars)`)}catch(e){console.error("MCP Active Cell Bridge: Failed to update cell:",e),s.send({type:"update_response",request_id:o,success:!1,message:`Failed to update cell: ${e}`})}})(0,o,c):"execute_cell"===d?(async(e,s,o)=>{const n=o.request_id;try{const e=t.currentWidget,o=t.activeCell;if(!e||!o)return void s.send({type:"execute_response",request_id:n,success:!1,message:"No active cell available for execution"});await l.NotebookActions.run(e.content,e.sessionContext),s.send({type:"execute_response",request_id:n,success:!0,cell_id:o.model.id,message:"Cell executed successfully"}),console.log("MCP Active Cell Bridge: Executed active cell")}catch(e){console.error("MCP Active Cell Bridge: Failed to execute cell:",e),s.send({type:"execute_response",request_id:n,success:!1,message:`Failed to execute cell: ${e}`})}})(0,o,c):"add_cell"===d?(async(e,s,o)=>{const n=o.request_id,c=o.cell_type||"code",d=o.position||"below",r=o.content||"";try{const e=t.currentWidget;if(!e)return void s.send({type:"add_cell_response",request_id:n,success:!1,message:"No active notebook available"});const o=["code","markdown","raw"];if(!o.includes(c))return void s.send({type:"add_cell_response",request_id:n,success:!1,message:`Invalid cell_type '${c}'. Must be one of: ${o.join(", ")}`});const i=["above","below"];if(!i.includes(d))return void s.send({type:"add_cell_response",request_id:n,success:!1,message:`Invalid position '${d}'. Must be one of: ${i.join(", ")}`});"above"===d?await l.NotebookActions.insertAbove(e.content):await l.NotebookActions.insertBelow(e.content);const a=t.activeCell;a&&(a.model.type!==c&&await l.NotebookActions.changeCellType(e.content,c),r&&a.model.sharedModel.setSource(r)),s.send({type:"add_cell_response",request_id:n,success:!0,cell_type:c,position:d,content_length:r.length,cell_id:null==a?void 0:a.model.id,message:"Cell added successfully"}),console.log(`MCP Active Cell Bridge: Added ${c} cell ${d} with ${r.length} chars`)}catch(e){console.error("MCP Active Cell Bridge: Failed to add cell:",e),s.send({type:"add_cell_response",request_id:n,success:!1,message:`Failed to add cell: ${e}`})}})(0,o,c):"delete_cell"===d?(async(e,s,o)=>{var n;const c=o.request_id;try{const e=t.currentWidget,o=t.activeCell;if(!e||!o)return void s.send({type:"delete_cell_response",request_id:c,success:!1,message:"No active cell available for deletion"});const d=o.model.id;((null===(n=e.content.model)||void 0===n?void 0:n.cells.length)||0)<=1?(o.model.sharedModel.setSource(""),s.send({type:"delete_cell_response",request_id:c,success:!0,cell_id:d,action:"cleared",message:"Last cell content cleared (cell preserved)"}),console.log("MCP Active Cell Bridge: Cleared last cell content")):(await l.NotebookActions.deleteCells(e.content),s.send({type:"delete_cell_response",request_id:c,success:!0,cell_id:d,action:"deleted",message:"Cell deleted successfully"}),console.log("MCP Active Cell Bridge: Deleted cell"))}catch(e){console.error("MCP Active Cell Bridge: Failed to delete cell:",e),s.send({type:"delete_cell_response",request_id:c,success:!1,message:`Failed to delete cell: ${e}`})}})(0,o,c):"delete_cells_by_number"===d?(async(e,s,l)=>{var o,n;const c=l.request_id,d=l.cell_numbers||[];try{const e=t.currentWidget;if(!e)return void s.send({type:"delete_cells_by_number_response",request_id:c,success:!1,message:"No active notebook available"});if(!Array.isArray(d)||0===d.length)return void s.send({type:"delete_cells_by_number_response",request_id:c,success:!1,message:"cell_numbers must be a non-empty array"});const l=e.content,r=null===(o=l.model)||void 0===o?void 0:o.cells;if(!r)return void s.send({type:"delete_cells_by_number_response",request_id:c,success:!1,message:"Cannot access notebook cells"});const i=new Map;for(let e=0;e<r.length;e++){const t=r.get(e).executionCount;null!=t&&i.set(t,e)}const a=[],u=[];for(const e of d)if(i.has(e)){const t=i.get(e);u.push(t),a.push({cell_number:e,index:t,success:!0})}else a.push({cell_number:e,success:!1,message:`Cell with execution count ${e} not found`});u.sort((e,t)=>t-e);let p=0,g=0;for(const e of u)try{if(1===r.length){const t=r.get(e);if(t){t.sharedModel.setSource("");const s=a.findIndex(t=>t.index===e);-1!==s&&(a[s].message="Last cell - content cleared instead of deleted",a[s].cleared=!0),g++}}else null===(n=l.model)||void 0===n||n.sharedModel.deleteCell(e),p++}catch(t){const s=a.findIndex(t=>t.index===e);-1!==s&&(a[s].success=!1,a[s].message=`Failed to delete: ${t}`)}s.send({type:"delete_cells_by_number_response",request_id:c,success:!0,deleted_count:p,total_requested:d.length,results:a,message:`Deleted ${p} cell(s)`}),console.log(`MCP Active Cell Bridge: Deleted ${p} cells by number`)}catch(e){console.error("MCP Active Cell Bridge: Failed to delete cells by number:",e),s.send({type:"delete_cells_by_number_response",request_id:c,success:!1,message:`Failed to delete cells: ${e}`})}})(0,o,c):"move_cursor"===d?(async(e,s,l)=>{var o;const n=l.request_id,c=l.target;try{const e=t.currentWidget,l=null==e?void 0:e.content;if(!e||!l)return void s.send({type:"move_cursor_response",request_id:n,success:!1,message:"No active notebook available"});const d=null===(o=l.model)||void 0===o?void 0:o.cells;if(!d||0===d.length)return void s.send({type:"move_cursor_response",request_id:n,success:!1,message:"No cells in notebook"});const r=l.activeCellIndex;let i;if("above"===c)i=r-1;else if("below"===c)i=r+1;else{const e=parseInt(c);if(isNaN(e))return void s.send({type:"move_cursor_response",request_id:n,success:!1,message:`Invalid target '${c}'. Must be 'above', 'below', or a cell number`});let t=!1;for(let s=0;s<d.length;s++)if(d.get(s).executionCount===e){i=s,t=!0;break}if(!t)return void s.send({type:"move_cursor_response",request_id:n,success:!1,message:`Cell with execution count ${e} not found`})}i=Math.max(0,Math.min(i,d.length-1)),l.activeCellIndex=i;const a=l.activeCell;a&&l.scrollToCell(a),s.send({type:"move_cursor_response",request_id:n,success:!0,old_index:r,new_index:i,message:`Cursor moved from index ${r} to ${i}`}),console.log(`MCP Active Cell Bridge: Moved cursor from ${r} to ${i}`)}catch(e){console.error("MCP Active Cell Bridge: Failed to move cursor:",e),s.send({type:"move_cursor_response",request_id:n,success:!1,message:`Failed to move cursor: ${e}`})}})(0,o,c):"apply_patch"===d?(async(e,s,l)=>{const o=l.request_id,n=l.old_text||"",c=l.new_text||"";try{const e=t.currentWidget,l=t.activeCell;if(!e||!l)return void s.send({type:"apply_patch_response",request_id:o,success:!1,message:"No active cell available for patching"});if(!n)return void s.send({type:"apply_patch_response",request_id:o,success:!1,message:"old_text parameter cannot be empty"});const d=l.model.sharedModel.getSource(),r=d.replace(n,c);r!==d?(l.model.sharedModel.setSource(r),s.send({type:"apply_patch_response",request_id:o,success:!0,cell_id:l.model.id,replaced:!0,old_text_length:n.length,new_text_length:c.length,content_length_before:d.length,content_length_after:r.length,message:"Patch applied successfully"}),console.log(`MCP Active Cell Bridge: Applied patch (${n.length} -> ${c.length} chars)`)):(s.send({type:"apply_patch_response",request_id:o,success:!0,cell_id:l.model.id,replaced:!1,old_text_length:n.length,new_text_length:c.length,message:"Patch target not found - no changes made"}),console.log("MCP Active Cell Bridge: Patch target not found"))}catch(e){console.error("MCP Active Cell Bridge: Failed to apply patch:",e),s.send({type:"apply_patch_response",request_id:o,success:!1,message:`Failed to apply patch: ${e}`})}})(0,o,c):console.warn(`MCP Active Cell Bridge: Unknown message type: ${d}`)},o.onClose=t=>{console.log("MCP Active Cell Bridge: Comm closed"),c.delete(e),s.delete(e),d.delete(e)},await o.open({}).done,c.set(e,!0),s.set(e,o),o}catch(t){console.error("MCP Active Cell Bridge: Failed to create comm:",t);const l=(null==t?void 0:t.toString())||"";throw(l.includes("No such comm target")||l.includes("comm target"))&&(console.error("MCP Active Cell Bridge: Kernel comm target not registered!"),console.error("Run this command in a notebook cell: %load_ext servers.jupyter_qcodes.jupyter_mcp_extension")),c.delete(e),s.delete(e),t}finally{d.delete(e)}})(),d.set(e,n),await n}return o},p=async l=>{var o,n,r,a,p,g,v;const _=t.currentWidget,m=t.activeCell;if(!_||!m)return;const y=null!=l?l:null===(o=_.sessionContext.session)||void 0===o?void 0:o.kernel;if(!y)return;const C=await u(y);if(C&&i(y,C))try{const t=m.editor,s=m.model.sharedModel.getSource();let l=null;try{l=null!==(r=null===(n=null==t?void 0:t.getCursorPosition)||void 0===n?void 0:n.call(t))&&void 0!==r?r:null}catch(e){}let o=null;try{const e=null!==(p=null===(a=null==t?void 0:t.getSelection)||void 0===a?void 0:a.call(t))&&void 0!==p?p:null;e&&e.start!==e.end&&(o={start:e.start,end:e.end})}catch(e){}const c=5e4;let d=s,i=!1;s.length>c&&(d=s.slice(0,c),i=!0);const u={type:"snapshot",path:_.context.path,index:_.content.activeCellIndex,id:m.model.id,cell_type:m.model.type,text:d,cursor:l,selection:o,truncated:i,original_length:s.length,ts_ms:Date.now(),client_id:null!==(v=null===(g=e.info)||void 0===g?void 0:g.workspace)&&void 0!==v?v:"unknown"};C.send(u),console.log(`MCP Active Cell Bridge: Sent snapshot (${d.length} chars)`)}catch(e){console.error("MCP Active Cell Bridge: Failed to send snapshot:",e),s.delete(y),c.delete(y),d.delete(y)}else console.warn("MCP Active Cell Bridge: Comm not ready for sending")};t.activeCellChanged.connect(async(e,s)=>{var l,o,n;const c=null!==(n=null===(o=null===(l=t.currentWidget)||void 0===l?void 0:l.sessionContext.session)||void 0===o?void 0:o.kernel)&&void 0!==n?n:null;await u(c),await p(c);const d=t.activeCell;if(d){const e=(e=>{let t=null;return()=>{t&&window.clearTimeout(t),t=window.setTimeout(e,2e3)}})(()=>p(c));d.model.sharedModel.changed.connect(()=>{e()}),console.log("MCP Active Cell Bridge: Tracking new active cell")}}),t.currentChanged.connect(async(e,s)=>{var l,o,n;const c=null!==(n=null===(o=null===(l=t.currentWidget)||void 0===l?void 0:l.sessionContext.session)||void 0===o?void 0:o.kernel)&&void 0!==n?n:null;await u(c),await p(c),console.log("MCP Active Cell Bridge: Notebook changed, sent snapshot")}),t.widgetAdded.connect((e,t)=>{t.sessionContext.ready.then(()=>{var e,s;const l=null!==(s=null===(e=t.sessionContext.session)||void 0===e?void 0:e.kernel)&&void 0!==s?s:null;u(l),l&&a(l),console.log("MCP Active Cell Bridge: Kernel ready, setting up comms")})}),t.forEach(e=>{var t,s;const l=null!==(s=null===(t=e.sessionContext.session)||void 0===t?void 0:t.kernel)&&void 0!==s?s:null;l&&a(l)}),console.log("MCP Active Cell Bridge: Event listeners registered")}}}}]);