"use strict";(self.webpackChunkmcp_active_cell_bridge=self.webpackChunkmcp_active_cell_bridge||[]).push([[509],{509:(e,t,l)=>{l.r(t),l.d(t,{default:()=>n});const n={id:"mcp-active-cell-bridge:plugin",description:"Bridge active cell content to MCP server via kernel comm",autoStart:!0,requires:[l(980).INotebookTracker],activate:(e,t)=>{console.log("MCP Active Cell Bridge extension activated");const l=new WeakMap,n=async e=>{if(!e||!e.status||"dead"===e.status)return null;let t=l.get(e);if(!t)try{t=e.createComm("mcp:active_cell"),t.open({}),t.onMsg=t=>{var l;"request_current"===((null===(l=null==t?void 0:t.content)||void 0===l?void 0:l.data)||{}).type&&o(e)},l.set(e,t),console.log("MCP Active Cell Bridge: Comm opened with kernel")}catch(e){return console.error("MCP Active Cell Bridge: Failed to create comm:",e),null}return t},o=n=>{var o,i,c,s,r,d,a;const u=t.currentWidget,v=t.activeCell;if(!u||!v)return;const g=l.get(null!=n?n:null===(o=u.sessionContext.session)||void 0===o?void 0:o.kernel);if(g)try{const t=v.editor,l=v.model.sharedModel.getSource();let n=null;try{n=null!==(c=null===(i=null==t?void 0:t.getCursorPosition)||void 0===i?void 0:i.call(t))&&void 0!==c?c:null}catch(e){}let o=null;try{const e=null!==(r=null===(s=null==t?void 0:t.getSelection)||void 0===s?void 0:s.call(t))&&void 0!==r?r:null;e&&e.start!==e.end&&(o={start:e.start,end:e.end})}catch(e){}const C=5e4;let h=l,p=!1;l.length>C&&(h=l.slice(0,C),p=!0);const m={type:"snapshot",path:u.context.path,index:u.content.activeCellIndex,id:v.model.id,cell_type:v.model.type,text:h,cursor:n,selection:o,truncated:p,original_length:l.length,ts_ms:Date.now(),client_id:null!==(a=null===(d=e.info)||void 0===d?void 0:d.workspace)&&void 0!==a?a:"unknown"};g.send(m),console.log(`MCP Active Cell Bridge: Sent snapshot (${h.length} chars)`)}catch(e){console.error("MCP Active Cell Bridge: Failed to send snapshot:",e)}};t.activeCellChanged.connect(async(e,l)=>{var i,c,s;const r=null!==(s=null===(c=null===(i=t.currentWidget)||void 0===i?void 0:i.sessionContext.session)||void 0===c?void 0:c.kernel)&&void 0!==s?s:null;await n(r),o(r);const d=t.activeCell;if(d){const e=(e=>{let t=null;return()=>{t&&window.clearTimeout(t),t=window.setTimeout(e,2e3)}})(()=>o(r));d.model.sharedModel.changed.connect(()=>{e()}),console.log("MCP Active Cell Bridge: Tracking new active cell")}}),t.currentChanged.connect(async(e,l)=>{var i,c,s;const r=null!==(s=null===(c=null===(i=t.currentWidget)||void 0===i?void 0:i.sessionContext.session)||void 0===c?void 0:c.kernel)&&void 0!==s?s:null;await n(r),o(r),console.log("MCP Active Cell Bridge: Notebook changed, sent snapshot")}),t.widgetAdded.connect((e,t)=>{t.sessionContext.ready.then(()=>{var e,l;const o=null!==(l=null===(e=t.sessionContext.session)||void 0===e?void 0:e.kernel)&&void 0!==l?l:null;n(o),console.log("MCP Active Cell Bridge: Kernel ready, setting up comm")})}),console.log("MCP Active Cell Bridge: Event listeners registered")}}}}]);